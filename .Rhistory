# radial SVM
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
prediction_list<-list()
#table(dat44.balanced$HYPBC)
# K-fold cross-validation:
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(Y1.cho_score~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
prediction_list[i] = fold_predict
}
library(e1071)
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
# radial SVM
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
prediction_list<-list()
#table(dat44.balanced$HYPBC)
# K-fold cross-validation:
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
prediction_list[i] = fold_predict
}
prediction_list[[1]]
fold_predict
confusionMatrix(table(fold_predict, fold_test$Y1.cho_score))
confusionMatrix(table(fold_predict, fold_test$y))
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
confusionMatrix(table(fold_predict, fold_test$y))
fold_predict
mylist<-list
mylist[1]<-fold_predict
mylist<-list()
mylist[1]<-fold_predict
mylist[1]
mylist[1]<-lapply(fold_predict,1)
m<-matrix(NA, nrow(temp_dat_bal), k)
m<-matrix(NA, nrow(temp_dat_bal), k_fold)
m
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
m[, i] = predict(res_svm2, fold_test)
}
fold-fold_test$y
fold_predict-fold_test$y
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
m[, i] = fold_predict
}
fold_predict-fold_test$y
fold_predict
fold_test
fold_test$y
fold_predict-fold_test$y
vector(fold_predict)-vector(fold_test$y)
mode(fold_predict)
mode(fold_test$y)
fold_test$y
fold_predict-as.numeric(fold_test$y)
as.numeric(fold_predict)-as.numeric(fold_test$y)
fold_predict!=fold_test$y
sum(fold_predict!=fold_test$y)
sum(fold_predict==fold_test$y)
# radial SVM
nrow(temp_dat_bal)
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(fold_predict!=fold_test$y)/(sum(fold_predict==fold_test$y)+sum(fold_predict==fold_test$y))
err_list[i]=err
}
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(fold_predict!=fold_test$y)/(sum(fold_predict==fold_test$y)+sum(fold_predict==fold_test$y))
err_list[i]=err
}
predic
err_list
sum(fold_predict!=fold_test$y)/(sum(fold_predict==fold_test$y)+sum(fold_predict==fold_test$y))
avg(err_list)
mean(err_list)
err_list[i]
err_list[1]
err_list[1]-2
err<-as.numeric(sum(fold_predict!=fold_test$y)/(sum(fold_predict==fold_test$y)+sum(fold_predict==fold_test$y)))
err_list[i]=err
err_list[1]
err<-as.numeric((fold_predict!=fold_test$y)
err_list[i]=err
as.numeric((fold_predict!=fold_test$y)
as.numeric((fold_predict!=fold_test$y)
as.numeric((fold_predict!=fold_test$y))
mean(as.numeric((fold_predict!=fold_test$y)))
sum(as.numeric((fold_predict!=fold_test$y)))
err<-sum(as.numeric((fold_predict!=fold_test$y)))
err_list[i]=err
err_list[10]
err_list
as.numeric(err_list)
library(e1071)
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
# radial SVM
nrow(temp_dat_bal)
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
# K-fold cross-validation for smote balanced data
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test)
err_list[i]=err
}
mean as.numeric(err_list)
as.numeric(err_list)
mean(as.numeric(err_list))
s<-confusionMatrix(table(fold_predict, fold_test$y))
s
# unbalanced data without SVM
folds<-createFolds(y=temp_dat[,1], k=k_fold)
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
for (i in 1:k_fold){
fold_test<-temp_dat[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
mean(as.numeric(err_list))
confusionMatrix(table(fold_predict, fold_test$y))
temp_dat_bal<-smote(y~., data = temp_dat, k=10)
table(temp_dat_bal$y) # highly unbalcend data: 1882 0 and 280 1
res_svm2$coefs
w<-t(res_svm2$coefs)%*%res_svm2$SV
w
temp_dat
str(temp_dat)
# Do not use magic number, 0,1,2,3 should be changed to meaningful levels later
X2<-dat2 %>% mutate(
Tri_score=as.factor(ifelse((TRIGRESB==1|TRIGRESB==2|TRIGRESB==3),0,ifelse((TRIGRESB==4|TRIGRESB==5),1,ifelse(TRIGRESB==97|TRIGRESB==98,NA,2)))),
Chol_score=as.factor(ifelse((CHOLRESB==1|CHOLRESB==2|CHOLRESB==3),0,ifelse((CHOLRESB==4|CHOLRESB==5|CHOLRESB==6),1,ifelse(CHOLRESB==97|CHOLRESB==98,NA,2)))),
LDL_score=as.factor(ifelse((LDLRESB==1|LDLRESB==2|LDLRESB==3|LDLRESB==4),0,ifelse((LDLRESB==5|LDLRESB==6|LDLRESB==7),1,ifelse(LDLRESB==97|LDLRESB==98,NA,2)))),
Glu_score=as.factor(ifelse((GLUCFREB==4|GLUCFREB==5),0,ifelse((GLUCFREB==6|GLUCFREB==7),1,ifelse(GLUCFREB==97|GLUCFREB==98,NA,2)))),
HDL_score=as.factor(ifelse((HDLCHREB==7|HDLCHREB==8),NA,ifelse((HDLCHREB==5|HDLCHREB==6),0,ifelse(HDLCHREB==1,2,1)))),
ApoB_score=as.factor(ifelse((APOBRESB==1|APOBRESB==2|APOBRESB==3|APOBRESB==4),0,ifelse((APOBRESB==5),1,ifelse(APOBRESB==97|APOBRESB==98,NA,2)))),
HbA1c_score=as.factor(ifelse((HBA1PREB==1|HBA1PREB==2),0,ifelse((HBA1PREB==3|HBA1PREB==4),1,ifelse(HBA1PREB==7|HBA1PREB==8,NA,2)))),
) %>% select (SYSTOL, DIASTOL,Tri_score, Chol_score, LDL_score, Glu_score, HDL_score, PHDCMWBC, EXLWMBC, EXLWVBC, ApoB_score, HbA1c_score)
str(X2)
#dat<-tech_biom %>% filter (AGEC >= 19, AGEC<=64, SMKSTAT==5)  # filter age and smoke status
dat<-tech_biom %>% filter (AGEC >= 19, AGEC<=64)  # filter age only
var_list<-c("BMISC","SEX","AGEC","DIABBC","HCHOLBC","HSUGBC","HYPBC","PHDCMWBC","EXLWMBC","EXLWVBC", "SYSTOL","DIASTOL","TRIGRESB","CHOLRESB","LDLRESB","HBA1PREB","GLUCFREB","HDLCHREB","CVDMEDST","APOBRESB") # add/remove variables that are interested
dat2<-dat %>% select (var_list) # select columns that we are interested
dat2$EXLWMBC<-as.numeric(as.character(dat$EXLWMBC)) # exerices time should be numeric
dat2$EXLWVBC<-as.numeric(as.character(dat$EXLWVBC)) # exerciese time should be numeric
str(dat2) # 7238 obs x 20 variables
Y1<-dat2 %>% mutate(
dia_score= as.factor(ifelse((DIABBC==5), 0, ifelse(DIABBC==3|DIABBC==2|DIABBC==1,1, NA))),
cho_score= as.factor(ifelse((HCHOLBC==5), 0, ifelse(HCHOLBC==3|HCHOLBC==2|HCHOLBC==1,1, NA))),
sug_score= as.factor(ifelse((HSUGBC==5),0, ifelse(HSUGBC==3|HSUGBC==2|HSUGBC==1,1,NA))),
hyp_score= as.factor(ifelse((HYPBC==5), 0, ifelse(HYPBC==3|HYPBC==2|HYPBC==1,1, NA))),
cvd_score= as.factor(ifelse((CVDMEDST==1|CVDMEDST==2|CVDMEDST==3),1,ifelse(CVDMEDST==4,0,NA))),
# final_score = dia_score+cho_score+sug_score+hyp_score+cvd_score
) %>% select(dia_score, cho_score, sug_score, hyp_score, cvd_score)
# Do not use magic number, 0,1,2,3 should be changed to meaningful levels later
X2<-dat2 %>% mutate(
Tri_score=as.factor(ifelse((TRIGRESB==1|TRIGRESB==2|TRIGRESB==3),0,ifelse((TRIGRESB==4|TRIGRESB==5),1,ifelse(TRIGRESB==97|TRIGRESB==98,NA,2)))),
Chol_score=as.factor(ifelse((CHOLRESB==1|CHOLRESB==2|CHOLRESB==3),0,ifelse((CHOLRESB==4|CHOLRESB==5|CHOLRESB==6),1,ifelse(CHOLRESB==97|CHOLRESB==98,NA,2)))),
LDL_score=as.factor(ifelse((LDLRESB==1|LDLRESB==2|LDLRESB==3|LDLRESB==4),0,ifelse((LDLRESB==5|LDLRESB==6|LDLRESB==7),1,ifelse(LDLRESB==97|LDLRESB==98,NA,2)))),
Glu_score=as.factor(ifelse((GLUCFREB==4|GLUCFREB==5),0,ifelse((GLUCFREB==6|GLUCFREB==7),1,ifelse(GLUCFREB==97|GLUCFREB==98,NA,2)))),
HDL_score=as.factor(ifelse((HDLCHREB==7|HDLCHREB==8),NA,ifelse((HDLCHREB==5|HDLCHREB==6),0,ifelse(HDLCHREB==1,2,1)))),
ApoB_score=as.factor(ifelse((APOBRESB==1|APOBRESB==2|APOBRESB==3|APOBRESB==4),0,ifelse((APOBRESB==5),1,ifelse(APOBRESB==97|APOBRESB==98,NA,2)))),
HbA1c_score=as.factor(ifelse((HBA1PREB==1|HBA1PREB==2),0,ifelse((HBA1PREB==3|HBA1PREB==4),1,ifelse(HBA1PREB==7|HBA1PREB==8,NA,2)))),
) %>% select (SYSTOL, DIASTOL,Tri_score, Chol_score, LDL_score, Glu_score, HDL_score, PHDCMWBC, EXLWMBC, EXLWVBC, ApoB_score, HbA1c_score)
str(X2)
# Do not use magic number, 0,1,2,3 should be changed to meaningful levels later
X1<-dat2 %>% mutate(
Sys_score=as.factor(ifelse(SYSTOL<120,0,ifelse(SYSTOL<130,1,ifelse(SYSTOL<140,2,ifelse(SYSTOL>=998,NA,3))))),
Dis_score=as.factor(ifelse(DIASTOL<80,0,ifelse(DIASTOL<90,1,ifelse(DIASTOL<100,2,ifelse(DIASTOL>=998,NA,3))))),
Tri_score=as.factor(ifelse((TRIGRESB==1|TRIGRESB==2|TRIGRESB==3),0,ifelse((TRIGRESB==4|TRIGRESB==5),1,ifelse(TRIGRESB==97|TRIGRESB==98,NA,2)))),
Chol_score=as.factor(ifelse((CHOLRESB==1|CHOLRESB==2|CHOLRESB==3),0,ifelse((CHOLRESB==4|CHOLRESB==5|CHOLRESB==6),1,ifelse(CHOLRESB==97|CHOLRESB==98,NA,2)))),
LDL_score=as.factor(ifelse((LDLRESB==1|LDLRESB==2|LDLRESB==3|LDLRESB==4),0,ifelse((LDLRESB==5|LDLRESB==6|LDLRESB==7),1,ifelse(LDLRESB==97|LDLRESB==98,NA,2)))),
Glu_score=as.factor(ifelse((GLUCFREB==4|GLUCFREB==5),0,ifelse((GLUCFREB==6|GLUCFREB==7),1,ifelse(GLUCFREB==97|GLUCFREB==98,NA,2)))),
HDL_score=as.factor(ifelse((HDLCHREB==7|HDLCHREB==8),NA,ifelse((HDLCHREB==5|HDLCHREB==6),0,ifelse(HDLCHREB==1,2,1)))),
Waist_score=as.factor(ifelse(SEX==1,ifelse(PHDCMWBC<102,0,ifelse(PHDCMWBC>=998,NA,1)),ifelse(PHDCMWBC<88,0,ifelse(PHDCMWBC>=998,NA,1)))),
MBC_score=ifelse(EXLWMBC<150,1,0),
VBC_score=ifelse(EXLWVBC<75,1,0),
ApoB_score=as.factor(ifelse((APOBRESB==1|APOBRESB==2|APOBRESB==3|APOBRESB==4),0,ifelse((APOBRESB==5),1,ifelse(APOBRESB==97|APOBRESB==98,NA,2)))),
HbA1c_score=as.factor(ifelse((HBA1PREB==1|HBA1PREB==2),0,ifelse((HBA1PREB==3|HBA1PREB==4),1,ifelse(HBA1PREB==7|HBA1PREB==8,NA,2)))),
) %>% select (Sys_score, Dis_score,Tri_score, Chol_score, LDL_score, Glu_score, HDL_score, Waist_score, MBC_score, VBC_score, ApoB_score, HbA1c_score)
X1$MBC_score<-as.factor(X1$MBC_score)
X1$VBC_score<-as.factor(X1$VBC_score)
str(X1)
mystd<-function(x){
x<-(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)
}
x<-X2[,-4] %>% mutate_if(is.numeric, list(mystd))
y<-Y1$cho_score
temp_dat<-data.frame(cbind(y,x)) %>% na.omit() # need to drop Chol_score in X2 since Y is calculated based on chol_score
temp_dat
temp_dat_bal<-smote(y~., data = temp_dat, k=10)
table(temp_dat_bal$y) # highly unbalanced data: 1882 0 and 280 1
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="polynomial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
w<-t(res_svm2$coefs)%*%res_svm2$SV
w
table(w)
data.frame(w)
data.frame(t(w))
b<--1*res_svm2$rho
data.frame(cbine(t(w),b))
data.frame(cbind(t(w),b))
res_svm2 <- svm(y~.,data=temp_dat, cost=C_val,kernel="linear",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
coef(res_svm2)
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
library(e1071)
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
# radial SVM
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
# K-fold cross-validation for smote balanced data
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
library(e1071)
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
# radial SVM
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
# K-fold cross-validation for smote balanced data
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
w<-t(res_svm2$coefs)%*%res_svm2$SV
b<--1*res_svm2$rho
data.frame(cbind(t(w),b))
str(temp_dat)
mean(as.numeric(err_list))
confusionMatrix(table(fold_predict, fold_test$y))
mean(as.numeric(err_list))
# unbalanced data without smote: not working, predict all 0
folds<-createFolds(y=temp_dat[,1], k=k_fold)
# K-fold cross-validation for smote balanced data
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat, cost=C_val,kernel="linear",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
mean(as.numeric(err_list))
coef(res_svm2)
confusionMatrix(table(fold_predict, fold_test$y))
library(e1071)
C_val <- 1
coef0 <- 1
gamma <- 1/ncol(X2[,-4])
degree <- 3
# radial SVM
k_fold=10
# create k folds
folds<-createFolds(y=temp_dat_bal[,1], k=k_fold)
# create a new vector to record test results
# K-fold cross-validation for smote balanced data
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
res_svm2 <- svm(y~.,data=temp_dat_bal, cost=C_val,kernel="radial",gamma=gamma)
fold_predict <- predict(res_svm2, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
w<-t(res_svm2$coefs)%*%res_svm2$SV
b<--1*res_svm2$rho
data.frame(cbind(t(w),b))
coef(res_svm2)
k_fold = 10
folds<-createFolds(y=temp_dat[,1],k=k_fold)
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat_bal[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_bal[-folds[[i]],] # remaining is training set
model<-neuralnet(y~., data=fold_train, hidden=3)
fold_predict <- predict(model, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
model<-neuralnet(y~., data=fold_train, hidden=3)
temp_dat
temp_dat$y<-as.numeric(temp_dat$y)
k_fold = 10
folds<-createFolds(y=temp_dat[,1],k=k_fold)
temp_dat$y<-as.numeric(temp_dat$y)
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat[-folds[[i]],] # remaining is training set
model<-neuralnet(y~., data=fold_train, hidden=3)
fold_predict <- predict(model, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
temp_dat<-one_hot(temp_dat)
temp_dat<-one_hot(as.data.table(temp_dat))
k_fold = 10
folds<-createFolds(y=temp_dat[,1],k=k_fold)
temp_dat<-one_hot(as.data.table(temp_dat))
err_list<-list()
for (i in 1:k_fold){
fold_test<-temp_dat[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat[-folds[[i]],] # remaining is training set
model<-neuralnet(y~., data=fold_train, hidden=3)
fold_predict <- predict(model, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
fold_train
hist(fold_train$y)
mystd<-function(x){
x<-(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)
}
x<-X2[,-4] %>% mutate_if(is.numeric, list(mystd))
y<-Y1$cho_score
temp_dat<-data.frame(cbind(y,x)) %>% na.omit() # need to drop Chol_score in X2 since Y is calculated based on chol_score
temp_dat
temp_dat_bal<-smote(y~., data = temp_dat, k=10)
table(temp_dat_bal$y) # highly unbalanced data: 1882 0 and 280 1
x_onehot<-one_hot(as.data.table(x))
temp_dat_onehot<-cbind(y,x_onehot)
fold_test<-temp_dat_onehot[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_onehot[-folds[[i]],] # remaining is training set
temp_dat_onehot
temp_dat_onehot<-cbind(y,x_onehot)%>%na.omit()
fold_test<-temp_dat_onehot[folds[[i]],] # select folds[[i]] as test test
folds<-createFolds(y=temp_dat[,1],k=k_fold)
folds
temp_dat_onehot[folds[1],]
temp_dat_onehot<-data.frame(temp_dat_onehot)
fold_test<-temp_dat_onehot[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_onehot[-folds[[i]],] # remaining is training set
for (i in 1:k_fold){
fold_test<-temp_dat_onehot[folds[[i]],] # select folds[[i]] as test test
fold_train<-temp_dat_onehot[-folds[[i]],] # remaining is training set
model<-neuralnet(y~., data=fold_train, hidden=3)
fold_predict <- predict(model, fold_test)
err<-sum(as.numeric((fold_predict!=fold_test$y)))/nrow(fold_test) # error rate for i th cv
err_list[i]=err
}
err_list
fold_predict
model$pred
model$pred<-fold_predict[,1]<0.5
table(fold_test$y, model$pred)
res<-nerualnet(y~., data=fold_train,hidden=3)
res<-neuralnet(y~., data=fold_train,hidden=3)
pred<-predict(res, fold_test)
res$pred<-pred[,1]<0.5
table(fold_test$y, res$pred)
table(res$pred,fold_test$y)
confusionMatrix(table(res$pred,fold_test$y))
pred[,1]
fold_test
fold_test$y
pred<- pred %>% mutate(
pred_class = ifelse(pred[,1]<0.5, 0, 1)
)
pred<- pred %>% mutate(
pred_class = ifelse(pred[1]<0.5, 0, 1)
)
pred<-data.frame(pred)
pred
pred<- pred %>% mutate(
pred_class = ifelse(X1<0.5, 0, 1)
)
fold_test$y
res$pred<-pred[,1]<0.5
confusionMatrix(table(res$pred,fold_test$y))
confusionMatrix(table(pred$pred_class,fold_test$y))
model<-neuralnet(y~., data=fold_train, hidden=3)
err_list[5]
res<-neuralnet(y~., data=fold_train,hidden=3)
res<-neuralnet(y~., data=fold_train,hidden=3)
pred<-pred
print(res)
plot(model)
res$weights
temp_dat
temp_dat_onehot
res$weights
compute(model, fold_test)
pred<-predict(res, fold_test)
pred
pred<-predict(res, fold_test[,-1])
pred
x_onehot<-mystd(x_onehot)
res<-neuralnet(y~., data=fold_train,hidden=3)
res<-neuralnet(y~., data=fold_train,hidden=3)
pred<-predict(res, fold_test[,-1])
pred<-predict(res, fold_test[,-1])
pred
model$result.matrix
pred2<-compute(model, fold_test)
pred
pred[1]
pred[,1]
return x
classifcation<-function (x){
if (x>0.5){
x=1
} else{
x=0
}
return (x)
}
res<-apply(pred,1 ,classifcation)
res
confusionMatrix(table(res,fold_test$y))
if (x<0.5){
classifcation<-function (x){
if (x<0.5){
x=1
} else{
x=0
}
return (x)
}
res<-apply(pred,1 ,classifcation)
res
confusionMatrix(table(res,fold_test$y))
confusionMatrix(table(res,fold_test$y))
table(res,fold_test$y)
table(res,fold_test$y)
res
